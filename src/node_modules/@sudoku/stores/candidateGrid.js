import { BOX_SIZE, SUDOKU_SIZE } from '@sudoku/constants';

export class CandidateGrid {
    constructor() {
    	// this.array = Array.from({ length: SUDOKU_SIZE }, () => new Array(SUDOKU_SIZE).fill([1,2,3,4,5,6,7,8,9]));
    	this.array = [
            [[1,2,3,4,5,6,7,8,9], [1,2,3,4,5,6,7,8,9], [1,2,3,4,5,6,7,8,9], [1,2,3,4,5,6,7,8,9], [1,2,3,4,5,6,7,8,9], [1,2,3,4,5,6,7,8,9], [1,2,3,4,5,6,7,8,9], [1,2,3,4,5,6,7,8,9], [1,2,3,4,5,6,7,8,9]],
            [[1,2,3,4,5,6,7,8,9], [1,2,3,4,5,6,7,8,9], [1,2,3,4,5,6,7,8,9], [1,2,3,4,5,6,7,8,9], [1,2,3,4,5,6,7,8,9], [1,2,3,4,5,6,7,8,9], [1,2,3,4,5,6,7,8,9], [1,2,3,4,5,6,7,8,9], [1,2,3,4,5,6,7,8,9]],
            [[1,2,3,4,5,6,7,8,9], [1,2,3,4,5,6,7,8,9], [1,2,3,4,5,6,7,8,9], [1,2,3,4,5,6,7,8,9], [1,2,3,4,5,6,7,8,9], [1,2,3,4,5,6,7,8,9], [1,2,3,4,5,6,7,8,9], [1,2,3,4,5,6,7,8,9], [1,2,3,4,5,6,7,8,9]],
            [[1,2,3,4,5,6,7,8,9], [1,2,3,4,5,6,7,8,9], [1,2,3,4,5,6,7,8,9], [1,2,3,4,5,6,7,8,9], [1,2,3,4,5,6,7,8,9], [1,2,3,4,5,6,7,8,9], [1,2,3,4,5,6,7,8,9], [1,2,3,4,5,6,7,8,9], [1,2,3,4,5,6,7,8,9]],
            [[1,2,3,4,5,6,7,8,9], [1,2,3,4,5,6,7,8,9], [1,2,3,4,5,6,7,8,9], [1,2,3,4,5,6,7,8,9], [1,2,3,4,5,6,7,8,9], [1,2,3,4,5,6,7,8,9], [1,2,3,4,5,6,7,8,9], [1,2,3,4,5,6,7,8,9], [1,2,3,4,5,6,7,8,9]],
            [[1,2,3,4,5,6,7,8,9], [1,2,3,4,5,6,7,8,9], [1,2,3,4,5,6,7,8,9], [1,2,3,4,5,6,7,8,9], [1,2,3,4,5,6,7,8,9], [1,2,3,4,5,6,7,8,9], [1,2,3,4,5,6,7,8,9], [1,2,3,4,5,6,7,8,9], [1,2,3,4,5,6,7,8,9]],
            [[1,2,3,4,5,6,7,8,9], [1,2,3,4,5,6,7,8,9], [1,2,3,4,5,6,7,8,9], [1,2,3,4,5,6,7,8,9], [1,2,3,4,5,6,7,8,9], [1,2,3,4,5,6,7,8,9], [1,2,3,4,5,6,7,8,9], [1,2,3,4,5,6,7,8,9], [1,2,3,4,5,6,7,8,9]],
            [[1,2,3,4,5,6,7,8,9], [1,2,3,4,5,6,7,8,9], [1,2,3,4,5,6,7,8,9], [1,2,3,4,5,6,7,8,9], [1,2,3,4,5,6,7,8,9], [1,2,3,4,5,6,7,8,9], [1,2,3,4,5,6,7,8,9], [1,2,3,4,5,6,7,8,9], [1,2,3,4,5,6,7,8,9]],
            [[1,2,3,4,5,6,7,8,9], [1,2,3,4,5,6,7,8,9], [1,2,3,4,5,6,7,8,9], [1,2,3,4,5,6,7,8,9], [1,2,3,4,5,6,7,8,9], [1,2,3,4,5,6,7,8,9], [1,2,3,4,5,6,7,8,9], [1,2,3,4,5,6,7,8,9], [1,2,3,4,5,6,7,8,9]],
        ];
    }
	get(x, y) { return this.array[y][x]; }
	delete(x, y, number) { 
		let index = this.array[y][x].indexOf(number);
		if (index !== -1) {
			this.array[y][x].splice(index, 1);
		}
	}
	deleteMultiNumbers(x, y, numberList) { 
		for (let i = 0; i < numberList.length; i++) 
			this.delete(x, y, numberList[i]);
	}
	clear(x, y) {
		this.array[y][x].splice(0, this.array[y][x].length);
	}
	is_exist(x, y, number) {
		let index = this.array[y][x].indexOf(number);
		return (index !== -1);
	}
	add(x, y, number) {
		this.array[y][x].push(number);
	}
	clone() {
		let newCandidateGrid = new CandidateGrid();
		newCandidateGrid.array = JSON.parse(JSON.stringify(this.array));
		return newCandidateGrid;
	}
	set(x, y, candidate) {
		this.array[y][x] = JSON.parse(JSON.stringify(candidate));
	}

	getCandidateList() {
		const candidateList = [];
		for(let y = 0; y < SUDOKU_SIZE; y++)
			for(let x = 0; x < SUDOKU_SIZE; x++)
				if(this.array[y][x].length > 0)
					candidateList.push({x, y, candidates: this.array[y][x]})
		return candidateList
	}
}
export function readFromCandidateList(candidateList) {
    let candidate_grid = new CandidateGrid();

    for(let y = 0; y < SUDOKU_SIZE; y++)
        for(let x = 0; x < SUDOKU_SIZE; x++)
                candidate_grid.clear(x, y);
    
    console.log(candidateList);
    for(let i = 0; i < candidateList.length; i++)
        if(candidateList[i]["candidates"].length > 0)
            candidate_grid.set(candidateList[i]["x"], candidateList[i]["y"], candidateList[i]["candidates"]);

    return candidate_grid;
}