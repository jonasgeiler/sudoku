import { writable,derived } from 'svelte/store';
import { strategySolution } from './grid'
import { BOX_SIZE, SUDOKU_SIZE } from '@sudoku/constants';

function createCandidates() {
	const candidates = writable({});

	return {
		subscribe: candidates.subscribe,
		add(pos, candidate) {
			candidates.update($candidates => {
				if (!$candidates.hasOwnProperty(pos.x + ',' + pos.y)) {
					$candidates[pos.x + ',' + pos.y] = [candidate];
				} else if ($candidates[pos.x + ',' + pos.y].includes(candidate)) {
					delete $candidates[pos.x + ',' + pos.y][$candidates[pos.x + ',' + pos.y].indexOf(candidate)];
				} else {
					$candidates[pos.x + ',' + pos.y].push(candidate);
				}

				return $candidates;
			});
		},

		// remove(pos, num) {
		// 	candidates.update($candidates => {
		// 		$candidates[pos.x + ',' + pos.y] = $candidates[pos.x + ',' + pos.y].filter(item => item !== num);
		// 	})
		// },

		clear(pos) {
			candidates.update($candidates => {
				delete $candidates[pos.x + ',' + pos.y];
				return $candidates;
			});
		},

		syncWithStrategy() {
			strategySolution.subscribe($strategySolution => {
				const updatedCandidates = {};
				const hints = $strategySolution;
				hints.forEach(hint => {
					const posKey = hint.x + ',' + hint.y;
					if (hint.candidates.length > 1) updatedCandidates[posKey] = hint.candidates;
				});
				candidates.set(updatedCandidates);
			});
		}
	}
}

export const candidates = createCandidates();


// export class CandidateGrid {
//     constructor() {
//     	// this.array = Array.from({ length: SUDOKU_SIZE }, () => new Array(SUDOKU_SIZE).fill([]));
//     }
// 	get(x, y) { return this.array[y][x]; }
// 	delete(x, y, number) { 
// 		let index = this.array[y][x].indexOf(number);
// 		if (index !== -1) {
// 			this.array[y][x].splice(index, 1);
// 		}
// 	}
// 	clear(x, y) {
// 		this.array[y][x].splice(0, this.array[y][x].length);
// 	}
// 	is_exist(x, y, number) {
// 		let index = this.array[y][x].indexOf(number);
// 		return (index !== -1);
// 	}
// 	add(x, y, number) {
// 		this.array[y][x].push(number);
// 	}
// 	clone() {
// 		let clonedArray = JSON.parse(JSON.stringify(this.array));
// 		return clonedArray;
// 	}
// 	set(x, y, candidate) {
// 		this.array[y][x] = JSON.parse(JSON.stringify(candidate));
// 	}

// 	getCandidateList() {
// 		const candidateList = [];
// 		for(let y = 0; y < SUDOKU_SIZE; y++)
// 			for(let x = 0; x < SUDOKU_SIZE; x++)
// 				if(this.array[y][x].length > 0)
// 					candidateList.push({x, y, candidates: this.array[y][x]})
// 		return candidateList
// 	}
// }