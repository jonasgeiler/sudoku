import { writable,derived } from 'svelte/store';
import{strategy} from './grid'
function createCandidates() {
	const candidates = writable({});

	return {
		subscribe: candidates.subscribe,
		add(pos, candidate) {
			candidates.update($candidates => {
				if (!$candidates.hasOwnProperty(pos.x + ',' + pos.y)) {
					$candidates[pos.x + ',' + pos.y] = [candidate];
				} else if ($candidates[pos.x + ',' + pos.y].includes(candidate)) {
					delete $candidates[pos.x + ',' + pos.y][$candidates[pos.x + ',' + pos.y].indexOf(candidate)];
				} else {
					$candidates[pos.x + ',' + pos.y].push(candidate);
				}

				return $candidates;
			});
		},

		// remove(pos, num) {
		// 	candidates.update($candidates => {
		// 		$candidates[pos.x + ',' + pos.y] = $candidates[pos.x + ',' + pos.y].filter(item => item !== num);
		// 	})
		// },

		clear(pos) {
			candidates.update($candidates => {
				delete $candidates[pos.x + ',' + pos.y];
				return $candidates;
			});
		},

		syncWithStrategy() {
			strategy.subscribe($strategy => {
				const updatedCandidates = {};
				for (const key in $strategy) {
					if ($strategy.hasOwnProperty(key)) {
						const hints = $strategy[key];
						hints.forEach(hint => {
							const posKey = hint.x + ',' + hint.y;
							if (hint.candidates.length > 1) updatedCandidates[posKey] = hint.candidates;
						});
					}
				}
				candidates.set(updatedCandidates);
			});
		}
	}
}

export const candidates = createCandidates();