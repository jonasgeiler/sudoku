import { BOX_SIZE, SUDOKU_SIZE } from '@sudoku/constants';
import { decodeSencode, encodeSudoku } from '@sudoku/sencode';
import { generateSudoku } from '@sudoku/sudoku';
import { derived, writable } from 'svelte/store';
import { hintStore } from '@sudoku/stores/hintStore';
import { hints } from './hints';
import { get } from 'svelte/store';
import { sudokutreemanager } from '@sudoku/stores/state';


class Grid {
	#grid;

	constructor() {
		this.#grid = writable(
			Array(SUDOKU_SIZE).fill().map(() => Array(SUDOKU_SIZE).fill(0))
		);
	}

	subscribe(callback) {
		return this.#grid.subscribe(callback);
	}

	generate(difficulty) {
		this.#grid.set(generateSudoku(difficulty));
	}

	decodeSencode(sencode) {
		this.#grid.set(decodeSencode(sencode));
	}

	get(gridStore, x, y) {
		return gridStore[y][x];
	}

	getSencode(gridStore) {
		return encodeSudoku(gridStore);
	}

	getGridCopy() {
		const currentValue = get(this.#grid);
		// 深拷贝二维数组
		const copy = currentValue.map(row => [...row]);
		return copy;
	}
}

export const grid = new Grid();

class UserGrid {
	#userGrid;

	constructor(gridInstance) {
		this.#userGrid = writable(
			Array(SUDOKU_SIZE).fill().map(() => Array(SUDOKU_SIZE).fill(0))
		);

		gridInstance.subscribe($grid => {
			const newGrid = $grid.map(row => [...row]);
			this.#userGrid.set(newGrid);
		});
	}

	subscribe(callback) {
		return this.#userGrid.subscribe(callback);
	}

	set(pos, value) {
		this.#userGrid.update($userGrid => {
			console.log("The current node before:", sudokutreemanager.currentNode.grid);
			$userGrid[pos.y][pos.x] = value;

			const CopiedGrid = this.getUserGridCopy();
			console.log("The current node:", sudokutreemanager.currentNode.grid);
			sudokutreemanager.createChildNode(CopiedGrid);
			return $userGrid;
		});
	}

	/**
	 * 与 hints.js 交互，获取提示值并保存到 hintStore 中。
	 * @param {Object} pos 提示的坐标 { x, y }
	 */
	applyHint(pos) {

		const currentUserGrid = get(this.#userGrid);

		let solve = hints.useHint(currentUserGrid);
		console.log("Solve:", solve);

		if (solve instanceof Array) {
			hintStore.hint_array_set(solve);
		}

	}
	getUserGridCopy() {
		// 先取出当前的值
		const currentGrid = get(this.#userGrid);

		// 利用 map + 扩展运算符（或 row.slice()）进行二维数组的深拷贝
		const deepCopiedGrid = currentGrid.map(row => [...row]);

		return deepCopiedGrid;
	}

	setGrid(newGrid) {

		if (
			!Array.isArray(newGrid) ||
			newGrid.length !== SUDOKU_SIZE ||
			!newGrid.every(row => Array.isArray(row) && row.length === SUDOKU_SIZE)
		) {
			throw new Error('Invalid grid format');
		}

		// 设置新的网格
		this.#userGrid.set(newGrid);
		// 打印当前的 #grid
		console.log(this.#userGrid);
	}
}

export const userGrid = new UserGrid(grid);

export const invalidCells = derived(userGrid, $userGrid => {
	const _invalidCells = [];

	const addInvalid = (x, y) => {
		const xy = `${x},${y}`;
		if (!_invalidCells.includes(xy)) _invalidCells.push(xy);
	};

	for (let y = 0; y < SUDOKU_SIZE; y++) {
		for (let x = 0; x < SUDOKU_SIZE; x++) {
			const value = $userGrid[y][x];

			if (value) {
				for (let i = 0; i < SUDOKU_SIZE; i++) {
					// Check the row
					if (i !== x && $userGrid[y][i] === value) {
						addInvalid(x, y);
					}

					// Check the column
					if (i !== y && $userGrid[i][x] === value) {
						addInvalid(x, i);
					}
				}

				// Check the box
				const startY = Math.floor(y / BOX_SIZE) * BOX_SIZE;
				const endY = startY + BOX_SIZE;
				const startX = Math.floor(x / BOX_SIZE) * BOX_SIZE;
				const endX = startX + BOX_SIZE;
				for (let row = startY; row < endY; row++) {
					for (let col = startX; col < endX; col++) {
						if (row !== y && col !== x && $userGrid[row][col] === value) {
							addInvalid(col, row);
						}
					}
				}
			}
		}
	}

	return _invalidCells;
}, []);
