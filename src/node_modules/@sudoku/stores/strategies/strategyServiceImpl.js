import { settings } from '@sudoku/stores/settings';
import { StrategyTemplate } from '@sudoku/stores/strategyTemplate';
// import { SUDOKU_SIZE } from '@sudoku/constants';
import { StrategyFactory } from '@sudoku/stores/strategies/strategyFactory';
import { SUDOKU_SIZE, BOX_SIZE } from '@sudoku/constants';
// import { StrategyService } from '@sudoku/stores/strategyService';

// export class strategyServiceImpl extends StrategyService {
// export class StrategyServiceImpl extends StrategyTemplate {
    export class StrategyServiceImpl {

    constructor() {
        // this.name = "MixedStrategy";
        // this.strategyNameList = ["NakedPair","X-Wing", "Y-Wing"];
        // ["X-Wing", "Y-Wing"]
    }

    execute(grid, candidate_grid, strategyNameList) {
        const results = [];
        
        let candidates_ = candidate_grid;
        const strategyList = this.getStrategyList(strategyNameList);
        // 用集合来存有效的策略
        let validStrategyList = new Set();

        // 循环，直到没有可用的策略
        // TODO: 加到常量里面，设置迭代上限
        let maxIterOfStrategies = 10000;
        for (let iter = 0; iter < maxIterOfStrategies; iter++){
            let totalRemoved = 0;
            //迭代执行每一种策略，记录生效的策略
            for (let i = 0; i < strategyList.length; i++) {
                const strategy = strategyList[i];
                let removed = 0;
                removed, candidates_ = strategy.execute(grid, candidates_);
                totalRemoved += removed;
                if (removed > 0) {
                    validStrategyList.add(strategy.getName());
                }
            }
            if (totalRemoved === 0) {
                break;
            }
        }

        // 拼接成要求的格式
        for (let y = 0; y < SUDOKU_SIZE; y++) {
            for (let x = 0; x < SUDOKU_SIZE; x++) {
                if (grid[y][x] === 0) {
                    const candidates = candidates_[y][x];
                    results.push({ x, y, candidates });
                }
            }
        }
        return validStrategyList, results; // 返回找到的所有符合条件的单元格
    }

    // 从settings中获取策略列表，没有这一项则开启全部策略
    getStrategyList(strategyNameList){
        // TODO: 等待上层传入settings
        // const strategyNameList = settings.get("strategyList");
        // const strategyNameList = ["X-Wing"];
        // if(!strategyNameList){
        //     // strategyNameList = ["NakedSingle", "HiddenSingle", "NakedPair", "HiddenPair", "NakedTriple", "HiddenTriple", "X-Wing", "Swordfish", "Jellyfish", "Chain", "Fish", "XYZ", "WXYZ"];
        //     strategyNameList = ["X-Wing"]
        // }
        return strategyNameList.map(strategyName => StrategyFactory.create(strategyName));
    }
}
