export class XWingStrategy {
    constructor() {}
  
    // 执行X-Wing策略
    execute(grid, candidates) {
        let newCandidates = JSON.parse(JSON.stringify(candidates)); // 深拷贝避免直接修改原数据
        // 记录总体移除的候选数
        let totalRemoved = 0;
        const maxIterOfStrategy = 1000;
        // 设置迭代上限
        for (let i = 0; i < maxIterOfStrategy; i++) {
            // let xwings = this.findXWings(newCandidates);
            let rowXWings = this.findRowXwings(newCandidates);
            let colXWings = this.findColXwings(newCandidates);
            let removed = 0;
            // for (let xwing of xwings) {
            //     removed, newCandidates = this.removeCandidate(newCandidates, xwing);
            // }
            for (let rowXwing of rowXWings) {
                const rowRemoved = this.removeRowCandidate(newCandidates, rowXwing);
                removed += rowRemoved;
            }
            for (let colXwing of colXWings) {
                const colRemoved = this.removeColCandidate(newCandidates, colXwing);
                removed += colRemoved;
            }
            totalRemoved += removed;
            if (removed === 0) {
                break;
            }
        }
      return totalRemoved, newCandidates;
    }

    // 查找所有行X-Wing:Array<(row1, row2, col1, col2, digit)>
    findRowXwings(candidates){
        let rowXWings = [];
        for (let digit = 1; digit <= 9; digit++) {
            // 获得潜在的行X-Wing（也就是只有2个候选数的行）
            let rowsWith2Digits = [];
            let colsPairs = [];
            for (let row = 0; row < 9; row++) {
                let cols = this.findColumnsForNumber(row, digit, candidates);
                if (cols.length === 2) {
                    rowsWith2Digits.push(row);
                    colsPairs.push(cols);
                }
            }

            // 潜在的行看列是否也完全相同，相同则组成真正的行X-Wing
            const len = rowsWith2Digits.length;
            for (let i = 0; i < len - 1; i++) {
                for (let j = i + 1; j < len; j++) {
                    let row1 = rowsWith2Digits[i];
                    let row2 = rowsWith2Digits[j];
                    let colPair1 = colsPairs[i];
                    let colPair2 = colsPairs[j];
                    if (colPair1[0] === colPair2[0] && colPair1[1] === colPair2[1]) {
                        rowXWings.push([row1, row2, colPair1[0], colPair1[1], digit]);
                        // 排除同一行和多个行同时配对的情况，TODO：调研是否可以和多个行同时配对
                        break;
                    }
                }
            }
            
        }
        return rowXWings;
    }


    findColXwings(candidates){
        let colXWings = [];
        for (let digit = 1; digit <= 9; digit++) {
            // 获得潜在的列X-Wing（也就是只有2个候选数的列）
            let colsWith2Digits = [];
            let rowsPairs = [];
            for (let col = 0; col < 9; col++) {
                let rows = this.findRowsForNumber(col, digit, candidates);
                if (rows.length === 2) {
                    colsWith2Digits.push(col);
                    rowsPairs.push(rows);
                }
            }

            // 潜在的列看行是否也完全相同，相同则组成真正的列X-Wing
            const len = colsWith2Digits.length;
            for (let i = 0; i < len - 1; i++) {
                for (let j = i + 1; j < len; j++) {
                    let col1 = colsWith2Digits[i];
                    let col2 = colsWith2Digits[j];
                    let rowPair1 = rowsPairs[i];
                    let rowPair2 = rowsPairs[j];
                    if (rowPair1[0] === rowPair2[0] && rowPair1[1] === rowPair2[1]) {
                        colXWings.push([rowPair1[0], rowPair1[1], col1, col2, digit]);
                        // 排除同一列和多个列同时配对的情况，TODO：调研是否可以和多个列同时配对
                        break;
                    }
                }
            }
            
        }
        return colXWings;
    }

    removeCandidate(candidates, xwing) {
        let removed = 0;
        const [row1, col1, row2, col2, digit] = xwing;
        let newCandidates = JSON.parse(JSON.stringify(candidates)); // 深拷贝避免直接修改原数据
        for (let col=0; col<9; col++){
            if(newCandidates[row1][col].includes(digit)){
                newCandidates[row1][col] = newCandidates[row1][col].filter(d => d !== digit);
                removed++;
            }
            
            if(newCandidates[row2][col].includes(digit)){
                newCandidates[row2][col] = newCandidates[row2][col].filter(d => d !== digit);
                removed++;
            }
        }
        for (let row=0; row<9; row++){
            if(newCandidates[row][col1].includes(digit)){
                newCandidates[row][col1] = newCandidates[row][col1].filter(d => d !== digit);
                removed++;
            }
            if(newCandidates[row][col2].includes(digit)){
                newCandidates[row][col2] = newCandidates[row][col2].filter(d => d !== digit);
                removed++;
            }   
        }
        return removed, newCandidates;
    }

    removeRowCandidate(candidates, xwing) {
        let removed = 0;
        const [row1, row2, col1, col2, digit] = xwing;
        // let newCandidates = JSON.parse(JSON.stringify(candidates)); // 深拷贝避免直接修改原数据
        for (let row=0; row<9; row++){
            if(candidates[row][col1].includes(digit) && row !== row1 && row !== row2){
                candidates[row][col1] = candidates[row][col1].filter(d => d !== digit);
                removed++;
            }
            if(candidates[row][col2].includes(digit) && row !== row1 && row !== row2){
                candidates[row][col2] = candidates[row][col2].filter(d => d !== digit);
                removed++;
            }   
        }
        return removed;
    }

    removeColCandidate(candidates, xwing) {
        let removed = 0;
        const [row1, row2, col1, col2, digit] = xwing;
        // let newCandidates = JSON.parse(JSON.stringify(candidates)); // 深拷贝避免直接修改原数据

        for (let col=0; col<9; col++){
            if(candidates[row1][col].includes(digit) && col !== col1 && col !== col2){
                candidates[row1][col] = candidates[row1][col].filter(d => d !== digit);
                removed++;
            }
            
            if(candidates[row2][col].includes(digit) && col !== col1 && col !== col2){
                candidates[row2][col] = candidates[row2][col].filter(d => d !== digit);
                removed++;
            }
        }
        return removed;
    }

    findXWings(candidates) {
        const xWings = [];
        for (let digit = 1; digit <= 9; digit++) {
            for(let row1 = 0; row1 < 8; row1++) {
                for(let row2 = row1 + 1; row2 < 9; row2++) {    
                    for(let col1 = 0; col1 < 8; col1++) {
                        for(let col2 = col1 + 1; col2 < 9; col2++) {
                            if(candidates[row1][col1].includes(digit) 
                                && candidates[row1][col2].includes(digit) 
                                && candidates[row2][col1].includes(digit) 
                                && candidates[row2][col2].includes(digit)) {
                                    xWings.push([row1, col1, row2, col2, digit]);
                                }
                            }
                        }
                    }
                }
        }
        return xWings;
    
    }

  // 执行X-Wing策略
  __execute(grid, candidates) {
    const newCandidates = JSON.parse(JSON.stringify(candidates)); // 深拷贝避免直接修改原数据
    
    for (let num = 1; num <= 9; num++) {
      const { rowsWithNum, colPairs } = this.findPotentialXWings(num, candidates);
      
      if (rowsWithNum.length >= 2) {
        this.applyXWingStrategy(rowsWithNum, colPairs, num, newCandidates);
      }
    }

    return 0, newCandidates;
  }

  // 查找潜在的X-Wing结构
  findPotentialXWings(num, candidates) {
    let rowsWithNum = [];
    let colPairs = [];

    for (let row = 0; row < 9; row++) {
      const cols = this.findColumnsForNumber(row, num, candidates);
      if (cols.length === 2) { // 如果当前行中数字num仅在两个位置出现
        rowsWithNum.push(row);
        colPairs.push(cols);
      }
    }

    return { rowsWithNum, colPairs };
  }

  // 在特定行中查找包含指定数字的所有列
  findColumnsForNumber(row, num, candidates) {
    let cols = [];
    for (let col = 0; col < 9; col++) {
      if (candidates[row][col].includes(num)) {
        cols.push(col);
      }
    }
    return cols;
  }

  // 在特定列中查找包含指定数字的所有行
  findRowsForNumber(col, num, candidates) {
    let rows = [];
    for (let row = 0; row < 9; row++) {
      if (candidates[row][col].includes(num)) {
        rows.push(row);
      }
    }
    return rows;
  }

  // 应用X-Wing策略
  applyXWingStrategy(rowsWithNum, colPairs, num, candidates) {
    for (let i = 0; i < colPairs[0].length; i++) {
      if (this.isCommonColumn(colPairs, colPairs[0][i])) {
        for (let row = 0; row < 9; row++) {
          if (!rowsWithNum.includes(row)) {
            candidates[row][colPairs[0][i]] = candidates[row][colPairs[0][i]].filter(n => n !== num);
          }
        }
      }
    }
  }

  // 判断是否所有行对都有共同的列
  isCommonColumn(colPairs, column) {
    return colPairs.every(cols => cols.includes(column));
  }

  }
  
  // 示例使用
  // var strategy = new XWingStrategy();
  // var updatedCandidates = strategy.execute(grid, candidates);