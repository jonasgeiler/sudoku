import Strategy from './Strategy';

export default class NakedSinglesStrategy extends Strategy {

    getName() {
        return 'Naked Singles';
    }

    /**
     * 应用 Naked Singles 策略
     * @param {number[][]} grid - 当前棋盘
     * @param {Array<Array<number[]>>} candidates - 当前候选值
     * @returns {Object} - { updated: boolean, steps: Array, candidates: Array<Array<number[]>> }
     */
    apply(grid, candidates) {
        const SUDOKU_SIZE = 9;
        const BOX_SIZE = 3;

        // 遍历棋盘，找到候选值只有一个的格子
        for (let row = 0; row < SUDOKU_SIZE; row++) {
            for (let col = 0; col < SUDOKU_SIZE; col++) {
                // 如果格子候选值为空或已经确定，则跳过
                if (candidates[row][col].length !== 1) continue;

                // 获取唯一候选值
                const uniqueValue = candidates[row][col][0];
                const boxStartRow = Math.floor(row / BOX_SIZE) * BOX_SIZE;
                const boxStartCol = Math.floor(col / BOX_SIZE) * BOX_SIZE;


                // 更新候选值：移除同行其他格子中的该值
                for (let c = 0; c < SUDOKU_SIZE; c++) {
                    if (c !== col && candidates[row][c].includes(uniqueValue)) {
                        candidates[row][c] = candidates[row][c].filter((v) => v !== uniqueValue);
                    }
                }

                // 更新候选值：移除同列其他格子中的该值
                for (let r = 0; r < SUDOKU_SIZE; r++) {
                    if (r !== row && candidates[r][col].includes(uniqueValue)) {
                        candidates[r][col] = candidates[r][col].filter((v) => v !== uniqueValue);
                    }
                }

                // 更新候选值：移除同宫格其他格子中的该值
                for (let r = boxStartRow; r < boxStartRow + BOX_SIZE; r++) {
                    for (let c = boxStartCol; c < boxStartCol + BOX_SIZE; c++) {
                        if ((r !== row || c !== col) && candidates[r][c].includes(uniqueValue)) {
                            candidates[r][c] = candidates[r][c].filter((v) => v !== uniqueValue);
                        }
                    }
                }
            }
        }
//        console.log(candidates)
        return candidates;
    }
}
