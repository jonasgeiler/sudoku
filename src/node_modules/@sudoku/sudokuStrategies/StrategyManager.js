import HiddenSingleStrategy from './HiddenSingleStrategy.js';
//import NakedPairsTriplesStrategy from './NakedPairsTriplesStrategy.js';
import Strategy from './Strategy'
import { getCandidates } from '../sudoku.js'; // 确保路径正确
import NakedSinglesStrategy from './NakedSinglesStrategy';
//import HiddenPairsStrategy from './HiddenPairsStrategy';
// import NakedPairsTriplesStrategy from './NakedPairsTriplesStrategy';
// 导入更多策略...

/**
 * 策略管理器
 */
export default class StrategyManager {
    constructor() {
        this.strategies = [];
        this.candidatesHistory = {}; // 用于记录每个算法执行后的 candidates
    }

    /**
     * 注册一个新的策略
     * @param {Strategy} strategy - 策略实例
     */
    register(strategy) {
        if (strategy instanceof Strategy) {
            this.strategies.push(strategy);
        } else {
            throw new Error('Strategy must be an instance of Strategy class');
        }
    }

    /**
     * 应用策略
     * @param {number[][]} grid - 当前数独网格
     * @param {Object} initialCandidates - 初始候选值
     * @returns {Object} - { updated: boolean, steps: Array }
     */
    applyStrategies(grid) {
        let candidates = getCandidates(grid);
        let tmm = JSON.parse(JSON.stringify(candidates));
        this.candidatesHistory = {}; // 重置字典
        this.candidatesHistory["initial candidates"] = JSON.parse(JSON.stringify(tmm));
//        console.log(tmm);
        for (const strategy of this.strategies) {

            const candidate = strategy.apply(grid, candidates); // 调用每个算法

            // 如果当前算法对 candidates 做了更改，则记录到字典中
            if (JSON.stringify(tmm) !== JSON.stringify(candidates)) {
                this.candidatesHistory[strategy.constructor.name] = JSON.parse(
                    JSON.stringify(candidate)
                );
//                console.log(this.candidatesHistory)
                tmm = JSON.parse(JSON.stringify(candidate)); // 更新传入下一个算法的候选值
            }

            // 如果有更新的数字（updated 为 true），直接返回结果
            // if (result.updated) {
            //     return result;
            // }
        }

        // 所有算法执行完后返回
        // return { updated: false, candidates, steps: [] };
//        return this.candidatesHistory;
        return candidates;
    }
}

// 初始化策略管理器并注册策略
export const strategyManager = new StrategyManager();


// 注册 Naked Pairs/Triples 策略

strategyManager.register(new NakedSinglesStrategy());
strategyManager.register(new HiddenSingleStrategy());
// strategyManager.register(new NakedPairsTriplesStrategy());
// strategyManager.register(new HiddenPairsStrategy());
//strategyManager.register(new NakedPairsTriplesStrategy());
// 注册更多策略...
