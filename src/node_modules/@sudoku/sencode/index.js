import { GRID_COORDS, GRID_LENGTH, SENCODE_REGEX, SENCODE_SEPARATOR as SEPARATOR, SENCODE_SEPARATOR_REVERSE as SEPARATOR_REVERSE } from '@sudoku/constants';
import Base62 from './base62';


/**
 * @param {number[]} flatGrid
 * @returns {boolean}
 */
function shouldReverse(flatGrid) {
	for (let cell = 0; cell < GRID_LENGTH; cell++) {
		if (flatGrid[(GRID_LENGTH - 1) - cell] !== 0) {
			return false;
		} else if (flatGrid[cell] !== 0) {
			return true;
		}
	}

	return false;
}


/**
 * @param {number[][]} sudoku
 * @returns {string}
 */
export function encodeSudoku(sudoku) {
	/** @type number[] */
	const flatGrid = sudoku.flat();

	const reversed = shouldReverse(flatGrid);
	if (reversed) {
		// Reverse sudoku array
		flatGrid.reverse();
	}

	let structure = '';
	let numbers = '';

	for (let cell = 0; cell < GRID_LENGTH; cell++) {
		structure += (flatGrid[cell] === 0 ? '0' : '1');

		if (flatGrid[cell] > 0) {
			numbers += flatGrid[cell] - 1; // Subtract 1 so the number gets smaller
		}
	}

	return Base62.encode(BigInt('0b' + structure)) +
		(reversed ? SEPARATOR_REVERSE : SEPARATOR) +
		Base62.encode(BigInt(numbers));
}


/**
 * @param {string} sencode - 一个81位的数独字符串（仅数字）
 * @returns {number[][]} 返回9x9的数独网格
 */
export function decodeSencode(sencode) {
	// 确保sencode是81位数字字符串
	if (!sencode || sencode.length !== 81 || !/^[0-9]{81}$/.test(sencode)) {
		throw new Error('Invalid sencode: must be a string of 81 digits');
	}

	const grid = [];
	for (let row = 0; row < 9; row++) {
		const rowData = sencode.slice(row * 9, row * 9 + 9).split('').map(d => parseInt(d, 10));
		grid.push(rowData);
	}

	return grid;
}

export function validateSudokuWikiUrl(url) {
	// 使用正则表达式进行匹配
	// ^https:\/\/www\.sudokuwiki\.org\/sudoku\.htm\?bd=：匹配固定的前缀
	// ([0-9]{81})：匹配 exactly 81 位数字并捕获
	const regex = /^https:\/\/www\.sudokuwiki\.org\/sudoku\.htm\?bd=([0-9]{81})$/;

	return regex.test(url);
}
/**
 * @param {string} sencode
 * @returns {boolean}
 */
export function validateSencode(sencode) {
	return sencode && sencode.trim().length !== 0 && validateSudokuWikiUrl(sencode);
}